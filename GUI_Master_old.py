import tkinter as tk
from tkinter import ttk, LEFT, END
from PIL import Image , ImageTk 
from tkinter.filedialog import askopenfilename
import cv2
import numpy as np
import time
import CNNModel 
import sqlite3
from tensorflow.keras.models import load_model
import os

root = tk.Tk()
root.configure(background="black")
w, h = root.winfo_screenwidth(), root.winfo_screenheight()
root.geometry("%dx%d+0+0" % (w, h))
root.title("Sickle Cell Detection")

w, h = root.winfo_screenwidth(), root.winfo_screenheight()
root.geometry("%dx%d+0+0" % (w, h))
root.title("Sickel Cell Detection")


#430
#++++++++++++++++++++++++++++++++++++++++++++
#####For background Image
#image2 =Image.open("C:/Users/bhand/OneDrive/Desktop/Code/23CP165-Sickel cell detection/s1.jpg")
#image2 =image2.resize((1240,680))

#background_image=ImageTk.PhotoImage(image2)

#background_label = tk.Label(root, image=background_image)

#background_label.image = background_image

#background_label.place(x=270, y=80) #, relwidth=1, relheight=1)

cap = cv2.VideoCapture("blood4.mp4")  # Replace "path_to_your_video.mp4" with the actual path

# Function to update the video frame
def update_video():
    ret, frame = cap.read()
    if not ret:
        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)  # Restart the video
        ret, frame = cap.read()
    if ret:
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        frame = cv2.resize(frame, (1220, 760))
        frame = Image.fromarray(frame)
        frame = ImageTk.PhotoImage(frame)
        video_label.configure(image=frame)
        video_label.image = frame
        video_label.after(30, update_video)
# Create a label for the video
video_label = tk.Label(root)
video_label.place(x=300, y=70, width=1220, height=760) 

# Start updating the video frame
update_video()






lbl = tk.Label(root, text="Sickel Cell Detection", font=('times', 35,' bold '), width=65,height=1,bg="#152238",fg="white")
lbl.place(x=0, y=0)


#frame_display = tk.LabelFrame(root, text=" --Display-- ", width=900, height=250, bd=5, font=('times', 14, ' bold '),bg="lightblue4")
#frame_display.grid(row=0, column=0, sticky='nw')
#frame_display.place(x=300, y=100)

#frame_display1 = tk.LabelFrame(root, text=" --Result-- ", width=900, height=200, bd=5, font=('times', 14, ' bold '),bg="lightblue4")
#frame_display1.grid(row=0, column=0, sticky='nw')
#frame_display1.place(x=300, y=430)

#frame_display2 = tk.LabelFrame(root, text=" --Calaries-- ", width=900, height=50, bd=5, font=('times', 14, ' bold '),bg="lightblue4")
#frame_display2.grid(row=0, column=0, sticky='nw')
#frame_display2.place(x=300, y=380)

frame_alpr = tk.LabelFrame(root, text="   Process   ", width=220, height=350, bd=5, font=('times', 14, ' bold '),bg="brown")
frame_alpr.grid(row=0, column=0, sticky='nw')
frame_alpr.place(x=22, y=200)



def update_label1(str_T):
    #clear_img()
    result_label = tk.Label(root, text=str_T, width=40, font=("bold", 25), bg='bisque2', fg='black')
    result_label.place(x=300, y=650)
    
    
    
################################$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
def update_cal(str_T):
    #clear_img()
    result_label = tk.Label(root, text=str_T, width=60, font=("bold", 25), bg='bisque2', fg='black')
    result_label.place(x=290, y=350)
    
    
    
###########################################################################
def train_model():
 
    update_label("Model Training Start...............")
    
    start = time.time()

    X= CNNModel.main()
    print(X)
    
    end = time.time()
        
    ET="Execution Time: {0:.4} seconds \n".format(end-start)
    
    msg="Model Training Completed.."+'\n'+ X + '\n'+ ET

    update_label(msg)

    # Fit the model



import functools
import operator


def convert_str_to_tuple(tup):
    s = functools.reduce(operator.add, (tup))
    return s

def test_model_proc(fn):
    from keras.models import load_model
    
    IMAGE_SIZE = 64
    LEARN_RATE = 1.0e-4
    CH=3
    print(fn)
    if fn!="":
        # Model Architecture and Compilation
        model = load_model('C:/Users/surya/OneDrive/Desktop/Final Code/cell_model.h5', compile=False)
        
        img = Image.open(fn)
        img = img.resize((IMAGE_SIZE,IMAGE_SIZE))
        img = np.array(img)
        
        img = img.reshape(1,IMAGE_SIZE,IMAGE_SIZE,3)
        
        img = img.astype('float32')
        img = img / 255.0
        print('img shape:',img)
        prediction = model.predict(img)
        print(np.argmax(prediction))
        cell=np.argmax(prediction)
        print(cell)
        
        if cell == 0:
            Cd="Sickeled Cell Detected \n Doctor Consultation Required \nReport Generated by (laboratory name) \n ---End of Report--- "
            percentage_detected = float(np.max(prediction)) * 100
            A=Cd
        elif cell == 1:
            Cd="LYMPHOCYTE Deficiency Detected\n Doctor Consultation Required \nReport Generated by (laboratory name) \n ---End of Report--- "
            percentage_detected = float(np.max(prediction)) * 100
            A=Cd
        elif cell == 2:
            Cd="Sickle Cell Not Detected\nReport Generated by (laboratory name) \n ---End of Report--- "
            A=Cd
            percentage_detected = 0
        elif cell == 3:
            Cd="NEUTROPHIL Cell Detected \n Doctor Consultation Required \nReport Generated by (laboratory name) \n ---End of Report--- "
            percentage_detected = float(np.max(prediction)) * 100
            A=Cd
      
        return A, percentage_detected
    else:
        return "Please select a valid image.", 0






# def clear_img():
    
#     img11 = tk.Label(frame_display, background='lightblue4',width=160,height=120)
#     img11.place(x=0, y=0)

def update_label(str_T):
    #clear_img()
    result_label = tk.Label(root, text=str_T, width=60, font=("bold", 25), bg='bisque2', fg='black')
    result_label.place(x=290, y=420)
# def train_model():
    
#     update_label("Model Training Start...............")
    
#     start = time.time()

#     X=Model_frm.main()
    
#     end = time.time()
        
#     ET="Execution Time: {0:.4} seconds \n".format(end-start)
    
#     msg="Model Training Completed.."+'\n'+ X + '\n'+ ET

#     update_label(msg)

def test_model():
    global fn
    if fn != "":
        update_label("Model Testing Start...............")
        
        start = time.time()
    
        result, percentage_detected = test_model_proc(fn)
        
        end = time.time()
            
        ET = "Detected Cell Percentage: {:.2f}% \n".format(percentage_detected)
        
        msg = "Image Testing Completed.."+'\n'+ result + '\n'+ ET
    else:
        msg = "Please Select Image For Prediction...."
        
    update_label(msg)

    
    
def openimage():
    global fn

    # Define the allowed folder for testing images
    testing_folder_path = "C:/Users/surya/OneDrive/Desktop/Final Code/testing"

    fileName = askopenfilename(initialdir=testing_folder_path, title='Select image for Analysis',
                               filetypes=[("all files", "*.*")])

    if fileName.startswith(testing_folder_path):
        IMAGE_SIZE = 200
        imgpath = fileName
        fn = fileName

        img = Image.open(imgpath)
        img = img.resize((IMAGE_SIZE, 200))
        img = np.array(img)

        x1 = int(img.shape[0])
        y1 = int(img.shape[1])

        im = Image.fromarray(img)
        imgtk = ImageTk.PhotoImage(im)

        img_label = tk.Label(root, text='Original', font=('times new roman', 20, 'bold'), image=imgtk,
                             compound='bottom', height=250, width=250)
        img_label.image = imgtk
        img_label.place(x=300, y=100)

    else:
        update_label("Please select a valid image.")

import re

def is_valid_filename(filename):
    if not any(char.isdigit() for char in filename) or '(' not in filename or ')' not in filename:
        update_label("Invalid image format. Please select a valid blood cell image.")
        return False
    return True


def convert_grey():
    global fn 
    print(fn)
    IMAGE_SIZE=200
    
    img = Image.open(fn)
    img = img.resize((IMAGE_SIZE,200))
    img = np.array(img)
    
    x1 = int(img.shape[0])
    y1 = int(img.shape[1])

    gs = cv2.cvtColor(cv2.imread(fn, 1), cv2.COLOR_RGB2GRAY)

    gs = cv2.resize(gs, (x1, y1))

    retval, threshold = cv2.threshold(gs, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    print(threshold)

    im = Image.fromarray(gs)
    imgtk = ImageTk.PhotoImage(image=im)
    
    img2 = tk.Label(root, text='Gray', font=('times new roman', 20 ,'bold'), image=imgtk, compound='bottom', height=250, width=250, bg='white')
    img2.image = imgtk
    img2.place(x=580, y=100)

    im = Image.fromarray(threshold)
    imgtk = ImageTk.PhotoImage(image=im)

    img3 = tk.Label(root, text='Binary', font=('times new roman', 20 ,'bold'), image=imgtk, compound='bottom', height=250, width=250)
    img3.image = imgtk
    img3.place(x=880, y=100)
    
    # Apply watershed algorithm and display watershed image only if the filename is valid
    if is_valid_filename(os.path.basename(fn)):
        # Apply watershed algorithm
        img_copy = img.copy()
        img_copy = cv2.cvtColor(img_copy, cv2.COLOR_BGR2RGB)  # Convert to RGB for compatibility with watershed
        img_gray = cv2.cvtColor(img_copy, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(img_gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        kernel = np.ones((3,3),np.uint8)
        opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=2)
        sure_bg = cv2.dilate(opening,kernel,iterations=3)
        dist_transform = cv2.distanceTransform(opening,cv2.DIST_L2,5)
        ret, sure_fg = cv2.threshold(dist_transform,0.7*dist_transform.max(),255,0)
        sure_fg = np.uint8(sure_fg)
        unknown = cv2.subtract(sure_bg,sure_fg)
        ret, markers = cv2.connectedComponents(sure_fg)
        markers = markers+1
        markers[unknown==255] = 0
        markers = cv2.watershed(img_copy,markers)
        img_copy[markers == -1] = [255,0,0]  # Mark watershed boundaries with red
        
        # Highlight detected blood cells
        contours, _ = cv2.findContours(threshold, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        for contour in contours:
            area = cv2.contourArea(contour)
            if area > 100:  # Adjust this threshold as needed for highlighting blood cells
                x, y, w, h = cv2.boundingRect(contour)
                cv2.rectangle(img_copy, (x, y), (x + w, y + h), (0, 255, 0), 2)  # Highlight with a green border
        
        im_ws = Image.fromarray(img_copy)
        imgtk_ws = ImageTk.PhotoImage(image=im_ws)
        
        img4 = tk.Label(root, text='Watershed', font=('times new roman', 20 ,'bold'), image=imgtk_ws, compound='bottom', height=250, width=250, bg='white')
        img4.image = imgtk_ws
        img4.place(x=1180, y=100)







    #result_label1 = tk.Label(root, image=imgtk, width=250,height=250, font=("bold", 25), bg='bisque2', fg='black')
    #result_label1.place(x=300, y=400)
    
    
    # def percentage(Width, Depth):
    #   return 100 * float(Width)/float(Depth)

    # print(percentage(5, 7))
    # # If you want to limit the number of decimal to 2, change the number in {:.2f} as you wish;
    # print('{:.2f}'.format(percentage(5, 7)))
    # your_value = 1/3.0
    # print('{:.1%}'.format(your_value)) # Change the "1" to however many decimal places you need
    # # Result:
    # # '33.3%'


#################################################################################################################
def window():

    root.destroy()
    




button1 = tk.Button(frame_alpr, text=" Select Image ", command=openimage,width=15, height=1, font=('times', 15, ' bold '),bg="white",fg="black")
button1.place(x=10, y=50)

button2 = tk.Button(frame_alpr, text="Image preprocess", command=convert_grey, width=15, height=1, font=('times', 15, ' bold '),bg="white",fg="black")
button2.place(x=10, y=120)

# button3 = tk.Button(frame_alpr, text="Train Model", command=train_model, width=12, height=1, font=('times', 15, ' bold '),bg="white",fg="black")
# button3.place(x=10, y=160)
# #
button4 = tk.Button(frame_alpr, text=" Prediction", command=test_model,width=15, height=1,bg="white",fg="black", font=('times', 15, ' bold '))
button4.place(x=10, y=190)
#
#
#button5 = tk.Button(frame_alpr, text="button5", command=window,width=8, height=1, font=('times', 15, ' bold '),bg="yellow4",fg="white")
#button5.place(x=450, y=20)

model = load_model('C:/Users/surya/OneDrive/Desktop/Final Code/cell_model.h5', compile=False)



exit = tk.Button(frame_alpr, text="Exit", command=window, width=15, height=1, font=('times', 15, ' bold '),bg="red",fg="white")
exit.place(x=10, y=260)



root.mainloop()












